
lab5:
import React from 'react';
import './index.css'; // Make sure Tailwind CSS is imported

function App() {
  const issues = [
    {
      id: 1,
      title: 'Login page error',
      description: 'Users are unable to log in with correct credentials.',
      status: 'Open',
    },
    {
      id: 2,
      title: 'UI misalignment on dashboard',
      description: 'Widgets are overlapping on smaller screens.',
      status: 'Closed',
    },
    {
      id: 3,
      title: 'API returns 500 error',
      description: 'GET /users endpoint is failing intermittently.',
      status: 'Open',
    },
  ];

  return (
    <div className="bg-gray-100 min-h-screen p-6">
      <h1 className="text-3xl font-bold mb-6 text-center">Issue Tracker</h1>
      <div className="max-w-3xl mx-auto space-y-4">
        {issues.map((issue) => (
          <div
            key={issue.id}
            className="p-4 border rounded-lg shadow-md bg-white"
          >
            <h2 className="text-xl font-semibold">{issue.title}</h2>
            <p className="text-gray-700">{issue.description}</p>
            <span
              className={`inline-block mt-2 px-3 py-1 text-sm rounded-full font-medium ${
                issue.status === 'Open'
                  ? 'bg-red-100 text-red-700'
                  : 'bg-green-100 text-green-700'
              }`}
            >
              {issue.status}
            </span>
          </div>
        ))}
      </div>
    </div>
  );
}

export default App;






index
@tailwind base;
@tailwind components;
@tailwind utilities;


/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./src/**/*.{js,jsx,ts,tsx}", // Add this line
  ],
  theme: {
    extend: {},
  },
  plugins: [],
};

=======================================

lab6:

import React, { useState, useEffect } from 'react';
import './index.css'; // Tailwind CSS import

function App() {
  const [count, setCount] = useState(0);

  // Simulate fetching initial data using useEffect
  useEffect(() => {
    // Simulate async data fetch (e.g., from API)
    const fetchInitialCount = () => {
      setTimeout(() => {
        setCount(5); // Initial value from "API"
      }, 1000); // Simulate delay
    };

    fetchInitialCount();
  }, []);

  // Event handlers
  const increment = () => setCount(prev => prev + 1);
  const decrement = () => setCount(prev => prev - 1);
  const double = () => setCount(prev => prev * 2);
  const reset = () => setCount(0);

  return (
    <div className="flex flex-col items-center justify-center min-h-screen bg-gray-100">
      <h1 className="text-3xl font-bold mb-4">React Counter</h1>
      <div className="text-6xl font-semibold text-blue-600 mb-6">{count}</div>

      <div className="flex flex-wrap gap-4">
        <button
          onClick={increment}
          className="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-lg shadow"
        >
          Increment
        </button>

        <button
          onClick={decrement}
          className="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-lg shadow"
        >
          Decrement
        </button>

        <button
          onClick={double}
          className="bg-yellow-500 hover:bg-yellow-600 text-white px-4 py-2 rounded-lg shadow"
        >
          Double
        </button>

        <button
          onClick={reset}
          className="bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded-lg shadow"
        >
          Reset
        </button>
      </div>
    </div>
  );
}

export default App;

===========================================





















lab7:

const express = require('express');
const app = express();
const PORT = 3000;

// Middleware to parse JSON
app.use(express.json());

// Custom middleware to log requests
app.use((req, res, next) => {
  console.log(`${req.method} ${req.url}`);
  next();
});

// Sample data
let products = [
  { id: 1, name: "Laptop", price: 700 },
  { id: 2, name: "Smartphone", price: 400 },
];

// Root endpoint
app.get('/', (req, res) => {
  res.send("Hello, Express!");
});

// GET all products
app.get('/products', (req, res) => {
  res.json(products);
});

// GET a specific product by ID
app.get('/products/:id', (req, res) => {
  const id = parseInt(req.params.id);
  const product = products.find(p => p.id === id);
  if (product) {
    res.json(product);
  } else {
    res.status(404).json({ message: "Product not found" });
  }
});

// POST - Add a new product
app.post('/products', (req, res) => {
  const newProduct = {
    id: products.length + 1,
    name: req.body.name,
    price: req.body.price
  };
  products.push(newProduct);
  res.status(201).json(newProduct);
});

// PUT - Update existing product
app.put('/products/:id', (req, res) => {
  const id = parseInt(req.params.id);
  const index = products.findIndex(p => p.id === id);
  if (index !== -1) {
    products[index] = { ...products[index], ...req.body };
    res.json(products[index]);
  } else {
    res.status(404).json({ message: "Product not found" });
  }
});

// DELETE - Remove a product
app.delete('/products/:id', (req, res) => {
  const id = parseInt(req.params.id);
  const index = products.findIndex(p => p.id === id);
  if (index !== -1) {
    const deleted = products.splice(index, 1);
    res.json({ message: "Product deleted", product: deleted[0] });
  } else {
    res.status(404).json({ message: "Product not found" });
  }
});

// Start server
app.listen(PORT, () => {
  console.log(`Server is running on http://localhost:${PORT}`);
});


===================================================

lab8:

backend server.js
// index.js
const express = require("express");
const mongoose = require("mongoose");
const cors = require("cors");

const app = express();
const PORT = 5000;

// Middleware
app.use(cors());
app.use(express.json());

// MongoDB connection
mongoose.connect("mongodb://127.0.0.1:27017/shop", {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});
const db = mongoose.connection;
db.on("error", console.error.bind(console, "MongoDB connection error:"));
db.once("open", () => console.log("Connected to MongoDB"));

// Mongoose Schema
const productSchema = new mongoose.Schema({
  name: String,
  price: Number,
});
const Product = mongoose.model("Product", productSchema);

// REST API routes
app.get("/products", async (req, res) => {
  const products = await Product.find();
  res.json(products);
});

app.post("/products", async (req, res) => {
  const newProduct = new Product(req.body);
  const savedProduct = await newProduct.save();
  res.status(201).json(savedProduct);
});

app.put("/products/:id", async (req, res) => {
  const updatedProduct = await Product.findByIdAndUpdate(
    req.params.id,
    req.body,
    { new: true }
  );
  res.json(updatedProduct);
});

app.delete("/products/:id", async (req, res) => {
  await Product.findByIdAndDelete(req.params.id);
  res.json({ message: "Product deleted" });
});

app.listen(PORT, () => {
  console.log(`Server running at http://localhost:${PORT}`);
});










======

frontend(app.js)
// src/App.js
import React, { useState, useEffect } from "react";

function App() {
  const [products, setProducts] = useState([]);
  const [form, setForm] = useState({ name: "", price: "" });

  useEffect(() => {
    fetchProducts();
  }, []);

  const fetchProducts = async () => {
    const res = await fetch("http://localhost:5000/products");
    const data = await res.json();
    setProducts(data);
  };

  const addProduct = async (e) => {
    e.preventDefault();
    await fetch("http://localhost:5000/products", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(form),
    });
    setForm({ name: "", price: "" });
    fetchProducts(); // Refresh list
  };

  return (
    <div className="p-6">
      <h1 className="text-2xl font-bold mb-4">Product List</h1>

      <form onSubmit={addProduct} className="mb-4 space-y-2">
        <input
          className="border p-2"
          placeholder="Product Name"
          value={form.name}
          onChange={(e) => setForm({ ...form, name: e.target.value })}
        />
        <input
          className="border p-2"
          placeholder="Price"
          type="number"
          value={form.price}
          onChange={(e) => setForm({ ...form, price: e.target.value })}
        />
        <button className="bg-blue-500 text-white px-4 py-2" type="submit">
          Add Product
        </button>
      </form>

      <ul className="space-y-2">
        {products.map((p) => (
          <li key={p._id} className="border p-2">
            {p.name} - â‚¹{p.price}
          </li>
        ))}
      </ul>
    </div>
  );
}

export default App;









